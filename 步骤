注册登陆：
******************注册登陆的flag，查看信息修改信息的flag，有些是写死的！

登陆：(初成)
/**
*table account    
*
**/
1、输入用户名和密码，前端对象传给后台。
2、后台Controller接收对象，提取处理，调用servlet Impl和dao Impl。
3、通过select * from Account where语句查找是否存在该用户
4、存在返回操作页面，不存在不返回。
session未做
要写一个登陆判断用的isAccountTrue,要密码 现在的那个isAccountTrue改成isAccountExit(name)已完成


/*===================================================================================================================================*/
注册：(初成，已合并)
/**
*table account  , table account_xxxxx， table project
*
**/
1、输入用户名和密码，点击注册
2、后台收到后判断用户名是否已经存在，如果存在则不能注册，如果不存在则存入数据库进行注册
3、根据flag插入对应的account_xxxx用户表的account_xxxx和account ,以及project表的account
session已做
*************业务员管理会员和客户代表，经理管理业务员，管理员管理部门经理，医生，财务，管理员。


/*===================================================================================================================================*/
查看模块:
查看个人信息(初成)
/**
*table account_xxxx
*需要参数：自己从session获取用户名和flag
**/

1、通过flag判断身份，直接查看此表
2、除了clident客户的信息比较多之外，其他人的信息属性都一样。


/*===================================================================================================================================*/
修改个人信息(初成个人修改自己的，未完成业务员等修改他人的信息)
/**
*table account_xxxx
*需要参数：前端传来个人信息对象的一系列参数
**/
1、通过flag判断身份，直接修改此表
2、除了clident客户的信息比较多之外，其他人的信息属性都一样


/*===================================================================================================================================*/
修改账户密码（初成用户个人）
/**
*table account
*需要参数：用户名，密码，新密码？
**/
1、后台通过新的accountForm来获取传来的用户名，原密码，新密码，确认新密码
2、通过accountForm的东西（get出来）来验证：(1）用户名和密码是否匹配或存在（select * from Account where account='' and password=''）;
（isAccountTrue（x，x）已做）。
(2)判断新密码和确认新密码是否一致。（前端判断）
3、若通过判断，则把把新密码放入account，新密码update进Account（是否要用到flag？）


/*===================================================================================================================================*/
查看体检结果(初成)
/**
*test_result
*需要参数：uid_test_detail , uid_order_detail
**/
1、用户点开订单，通过前端，获取uid_indent。一个用户一次预约只有一个订单
2、通过uid_indent向order_detail表查询，有多个对应的uid_order_detail（当时存入数据库时自动生成）。
3、uid_test_detail是test_result自行生成，对其他表无联系。

/*===================================================================================================================================*/
新建项目（初成，已合并）
/**
*table project，table project_detail
*需要参数，表参数
**/
1、请求新建项目，生成新类project传给前端。操作project表：数据库自动生成uuid_project，业务员输入account名字，以及其他project表的信息，
提交保存入数据库。**保存uid_project
2、当审核通过后，操作project_detail表，数据库自动生成uid_project_detail，从代码中获取uid_project存入，存入其他数值，保存入数据库。
********************此处存疑，accountGroup.setAccount()是一个对象，然而account为id，当查看项目的时候，这里只能以姓名查找，无法按照id（除非
新建项目写入的是id，然后从Account把account对象找出来，但是不用赋值account，因为注册的时候这个account已经存在于account_group表）查找，会有重名情况。

/*===================================================================================================================================*/
业务员管理  增加业务员、改业务员信息
/**
*table account  ,  table account_worker
* 
**/
增加业务员已做。


/*===================================================================================================================================*/
用户管理   改成：删除用户(不弄)
/**
*table account
*
**/
1、传入account（不能重复）？
2、删除与这个account有关的所有数据


insert into test_result(uuid_test_detail,result)values('123','xcfadfgetghew');

update table test set result= 'asd' where uuid_test_detail = '123';


api
注册检测:http://localhost:8080/Ommay/account/isAccountExist   返回：1、0(int) 无此用户。2、1(int) 有此用户
注册：http://localhost:8080/Ommay/account/checkRegister     返回：操作页面
登陆：http://localhost:8080/Ommay/account/checkRegister/checkLogin   返回：操作页面
查看个人信息：http://localhost:8080/Ommay/check/UserMessage/getUserMessage 返回：jsonObject

